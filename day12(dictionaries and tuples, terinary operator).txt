Dictonary : Dictionaries are used to store data values in key:value pairs.
            A dictionary is a collection which is ordered*, changeable and do not allow duplicates.
            As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.
syntax to create dictionary
          1st method
          programming = {"bug":"functionality",
                        "def":"function"}
          2nd method
          programming["print"]="output"  //here print is key and output is value
          3rd method
          programming.update({"input":"read"})

To access value in dictionary
            print(dictionaryName["key"])

To loop over dictionary
            for key,value in dictionaryName.items()
                        print(key,value)

            If we want only keys
            for key in dictionaryName.keys()
                        print(key)

            If we want only value
            for value in dicitonaryName.values()
                        print(value)
* Keys can only be any immutable data structures.
Values can be mutable or immutable data structures.


Tuples:  Python tuples are a type of data structure that is very similar to lists. The main difference between the two is that tuples are immutable, meaning they cannot be changed once 
         they are created. 

Syntax to create tuple
            tup=(1,2,3,4,5,6)
to access
            print(tup)
            or we can use index
            print(tup[0])
To mitigate deadlock situation we use objects like tuples.


Terinary Operators

            The Python ternary operator determines if a condition is true or false and then returns the appropriate value in accordance with the result. The ternary operator is useful in cases where we need to assign a value to a variable based on a simple condition, and we want to keep our code more concise — all in just one line of code. It’s particularly handy when you want to avoid writing multiple lines for a simple if-else situation.

Syntax: [on_true] if [expression] else [on_false]

expression: conditional_expression | lambda_expr

# Program to demonstrate conditional operator
a, b = 10, 20

# Copy value of a in min if a < b else copy b
min = a if a < b else b

print(min)

