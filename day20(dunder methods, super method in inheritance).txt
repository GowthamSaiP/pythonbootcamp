Dunder methods
  Dunder methods in Python, also known as magic methods, are special predefined methods that allow you to enrich your classes by providing customized functionality. These methods are easily recognizable as they start and end with double underscores, for example, __init__ or __str__. Dunder methods play a crucial role in emulating the behavior of built-in types and enable you to interact with Python's core features like sequences, iteration, operator overloading, attribute access, and more. By implementing dunder methods in your classes, you can customize behaviors such as object initialization, object representation, iteration, and more. They are essential for creating powerful and Pythonic classes that mimic the behavior of built-in types.
  Example
    class vehicle 
      def __init__(self,selfdriven,autogear,adsystem,tyres):
        self.selfdriven=selfdriven
        self.autogear=autogear
        self.adsystem=adsystem
        self.tyres=tyres
      def __str__(self):                                                     This mimics print 
        return f"{self.selfdriven},{self.autogear},{self.adsystem}"
      def __eq__(self,others):                                               mimics if equal to
        return self.selfdriven==others.selfdriven and self.autogear==others.autogear and self.adsystem==others.adsystem
      def __len__(self):
        return self.tyres

Super() method
  A Simple Rectangle Class
  A rectangle is a 4-sided shape where all angles are right angles and can be constructed using only a length and a width.
  Example
    class Rectangle():
    def __init__(self, length, width):
        self.length = length
        self.width = width
    def perimeter(self):
        return 2 * (self.length + self.width)
    def area(self):
        return self.length * self.width
  A square is a rectangle where length is equal to the width and can be constructed only using 1 length. As a square is a more specific rectangle, we can design the Square class to inherit from the Rectangle class.

  A Child Class Using super().__init__
    class Square(Rectangle):
      def __init__(self, length):
          super().__init__(length, length)

  Here, the super() function (remember to use brackets ()) returns a temporary object of Square's parent class Rectangle. This allows us to call the methods from inside the parent class Rectangle.

  As such, super().__init__() here actually refers to the __init__ method from inside the Rectangle class. As it takes in 2 arguments length and width, we have to pass in 2 arguments into super().__init__. As length and width are equal in a square, we can simply pass in length twice.
