Function : A function is a block of code which only runs when it is called. You can pass data, known as parameters, into a function. A function can return data as a result.

syntax
  def functionName(parameters)
    code block

Creating a Function
  def my_function():
    print("Hello from a function")

Calling a Function
  To call a function, use the function name followed by parenthesis:
    def my_function():
      print("Hello from a function")
        
    my_function()

Arguments
  Information can be passed into functions as arguments. Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate 
  them with a comma.
  The following example has a function with one argument (fname). When the function is called, we pass along a first name, which is used inside the function to print the full name:
  def my_function(fname):
    print(fname + " Refsnes")
      
  my_function("Emil")
  my_function("Tobias")
  my_function("Linus")
      
  The terms parameter and argument can be used for the same thing: information that are passed into a function.
  From a function's perspective:
    A parameter is the variable listed inside the parentheses in the function definition.
    An argument is the value that is sent to the function when it is called.
  Number of Arguments   
      By default, a function must be called with the correct number of arguments. Meaning that if your function expects 2 arguments, you have to call the function with 2 arguments, not 
      more, and not less.
  Arbitrary Arguments, *args
    If you do not know how many arguments that will be passed into your function, add a * before the parameter name in the function definition. This way the function will receive a tuple 
    (ordered sequence of values) of arguments, and can access the items accordingly:
    Example
      def my_function(*kids):
        print("The youngest child is " + kids[2])
      
      my_function("Emil", "Tobias", "Linus")
  Keyword Arguments
    You can also send arguments with the key = value syntax. This way the order of the arguments does not matter.
    Example
      def my_function(child3, child2, child1):
        print("The youngest child is " + child3)
    
      my_function(child1 = "Emil", child2 = "Tobias", child3 = "Linus")
  Arbitrary Keyword Arguments, **kwargs
    If you do not know how many keyword arguments that will be passed into your function, add two asterisk: ** before the parameter name in the function definition. This way the function 
    will receive a dictionary of arguments, and can access the items accordingly:
    Example
      def my_function(**kid):
        print("His last name is " + kid["lname"])

      my_function(fname = "Tobias", lname = "Refsnes")

Return Values
  To let a function return a value, use the return statement:
  Example :
    def my_function(x):
      return 5 * x
        
The pass Statement
  function definitions cannot be empty, but if you for some reason have a function definition with no content, put in the pass statement to avoid getting an error.

Positional-Only Arguments
  You can specify that a function can have ONLY positional arguments, or ONLY keyword arguments. To specify that a function can have only positional arguments, add , / after the 
  arguments:
  Example
    def my_function(x, /):
      print(x)
  Without the , / you are actually allowed to use keyword arguments even if the function expects positional arguments: But when adding the , / you will get an error if you try to send a 
  keyword argument:

Keyword-Only Arguments
  To specify that a function can have only keyword arguments, add *, before the arguments:
  Example
    def my_function(*, x):
      print(x)

Combine Positional-Only and Keyword-Only
  You can combine the two argument types in the same function. Any argument before the / , are positional-only, and any argument after the *, are keyword-only.
  Example
    def my_function(a, b, /, *, c, d):
      print(a + b + c + d)

Recursion
  Python also accepts function recursion, which means a defined function can call itself. Recursion is a common mathematical and programming concept. It means that a function calls 
  itself. This has the benefit of meaning that you can loop through data to reach a result. The developer should be very careful with recursion as it can be quite easy to slip into 
  writing a function which never terminates, or one that uses excess amounts of memory or processor power. However, when written correctly recursion can be a very efficient and 
  mathematically-elegant approach to programming.
  In this example, tri_recursion() is a function that we have defined to call itself ("recurse"). We use the k variable as the data, which decrements (-1) every time we recurse. The 
  recursion ends when the condition is not greater than 0 (i.e. when it is 0).
  To a new developer it can take some time to work out how exactly this works, best way to find out is by testing and modifying it.
  Example
    def tri_recursion(k):
      if(k > 0):
        result = k + tri_recursion(k - 1)
        print(result)
      else:
        result = 0
      return result
    
  print("\n\nRecursion Example Results")
  tri_recursion(6)

    
